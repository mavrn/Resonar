1. Verbesserungen
    -Tracks als Objekte entfernen
        ENTWEDER Album hat ein Array von Strings(Tracks), eventuell Laufzeit in den String mit einbauen
        ODER Collection in jedem Album einfügen, nur wenn mehr Infos notwendig sind
    -type Feld im Index entfernen

2. Suche:
    Wichtig: Alle strings in lowercase im Index speichern
    Finden der besten Lösung momentan Prio

    2.1. Suche mit Webcrawler
        Oli:    Programm zum crawlen von rateyourmusic schreiben, CSV/JSON mit Top Relevanten Alben füllen.
                Evlt gibt es auch schon eine solche CSV
                Oder: Vorgeschriebener Crawler hier: https://github.com/dbeley/rymscraper
                Dann: Daten in /albums + /artists schreiben, Index nach unten genanntem Schema befüllen

        2.1.1 Suche mit allen subtexten stored (Firebase search)
            Oli: Ermitteln, wie viele Alben mit dieser Speicherart in die Datenbank passen (1GB max)
            Beispiel: The Dark Side Of The Moon
            Wichtige Wörter Detected: Dark, Side, Moon (nutzen von NLP)
            Storen in index/id/doc.name: "the dark side of the moon"
            Storen in index/id/doc.subnounList: ["d", "da", "dar", "dark", "s", "si", "sid", "side", "m", "mo", "moo", "moon"]
            Eine Suche mit array-contains && range
            -> Storage-intensiv, Ladezeit-leicht

        2.1.2 Suche mit nur den nomen stored (Firebase search) -- Abgehakt, aber Sortieren momentan nicht möglich
            Beispiel: The Dark Side Of The Moon
            Wichtige Wörter Detected: Dark, Side, Moon (nutzen von NLP)
            Storen in index/id/doc.name: "the dark side of the moon"
            Storen in index/id/doc.subnoun1: "dark"
            Storen in index/id/doc.subnoun2: "side"
            Storen in index/id/doc.subnoun3: "moon"
            Vier Suchen mit Range
            -> Storage-leicht, Ladezeit-intensiv

        2.1.3 Suche ohne subnomen (Firebase search) -- Abgehakt
            Beispiel: The Dark Side Of The Moon
            Storen in index/id/doc.name: "the dark side of the moon"
            Eine Suche mit Range
            -> Storage-leicht, Ladezeit-leicht, aber keine Mittelwort-Suche (Suche nach "dark" -> keine Ergebnisse)

        2.1.4 Download des Indexes (Local search)
            ChatGPT-Schätzung: 5-10 Sekunden für 1000 Dokumente
            Hybrid Ergebnis anzeigen für Ladezeit
            Genaue Ladezeit ermitteln
            -> Storage-leicht, Ladezeit-leicht, aber Fake-Grid für ~5-10 Sekunden

        2.1.5 Download einer vorgeschriebenen JSON (Local search)
            JSON für tausende Alben immer noch unter 1MB 
            Schneller Download, und speichern im Lokalen Speicher möglich (support 5-10MB)
            Full Text Search möglich (besser als subnoun)
            Keine Option für Skalierbarbeit und Real-Time-Updates, brauchen wir beides aber nicht
            ->Momentan vielversprechendste Option

        2.1.6 Algolia-Suche (Extern search) -- Abgehakt
            Ausgetestet, keine Option wegen Pricing-Modell

    2.2. Suche mit API
        Oli:    Suche nach einer geeigneten API für Musiksuche (evtl mit Python)
                Kriterien
                    1. Schnelligkeit
                    2. Volumen
                    3. Suchqualität
                Auch wichtig: Cover-URL
                Hier würde die Datenbank wahrscheinlich mit derselben API befüllt werden, um Verbindung zwischen Index und Datenbank herzustellen

3. Design
    Fast fertige Seiten: Login, Register, Suchseite
    Fehlende Seiten: Userprofil, Album, Artist, User Settings
    Oli:    Design der Seiten auf Figma 
                1. Album
                2. User
                3. Artist
                4. Settings
            Wichtig: Desktop Frame und Smartphone Frame
            Eventuell zum CSS beitragen

Oli Checkliste:
    1. Design Albumseite (morgen?)
    2. 2.1.1 ermitteln (nächste Tage)
    3. Design User & Artistseite (wenn Albumseite gut läuft)
    4. 2.2 & Absprechen
    5. Wenn 2.2 nicht erfolgreich, dann 2.1 Webcrawler
    6. Am Ende: Ausführliches Testen der Seite, evtl Doku
    

Next:
    -Filter Mobil done
    -Onboarding, image upload: Location, Bio, Image done
    -Ability to add Comments and Ratings, Replies done
    -Searching for Singles and Artists done
    -Searching for Users
    -Artist page, Release page for Singles
    -Album, Artist, Single + Mobil refinement
    -User Settings
    -User Page rework
    -Datatype unification
    -Database building
    -Code cleaning
    -Documentation



JSON Updater:

    1. Keep track of how old JSON is
    2. If older than five minutes:
        -Fetch ratings and users
        -Write into index
        -Save to local and send to remote

Prüfe, ob JSON in local store:

Ja:
Prüfe, ob JSON neu:
Ja:
Nichts
Nein:
1. Download JSON remote
2