1. Tracks abschaffen

2. Suche:
    Wichtig: Alle strings in lowercase im Index speichern

    2.1. Suche mit Webcrawler
        Oli:    Programm zum crawlen von rateyourmusic schreiben, CSV/JSON mit Top Relevanten Alben füllen.
                Evlt gibt es auch schon eine solche CSV
                Oder: Vorgeschriebener Crawler hier: https://github.com/dbeley/rymscraper
                Dann: Daten in /albums + /artists schreiben, Index nach unten genanntem Schema befüllen

        2.1.1 Suche mit allen subtexten stored
            Beispiel: The Dark Side Of The Moon
            Wichtige Wörter Detected: Dark, Side, Moon
            Storen in index/id/doc.name: "the dark side of the moon"
            Storen in index/id/doc.subnounList: ["d", "da", "dar", "dark", "s", "si", "sid", "side", "m", "mo", "moo", "moon"]
            Eine Suche mit array-contains && range
            -> Storage-intensiv, Ladezeit-leicht

        2.1.2 Suche mit nur den nomen stored
            Beispiel: The Dark Side Of The Moon
            Wichtige Wörter Detected: Dark, Side, Moon
            Storen in index/id/doc.name: "the dark side of the moon"
            Storen in index/id/doc.subnoun1: "dark"
            Storen in index/id/doc.subnoun2: "side"
            Storen in index/id/doc.subnoun3: "moon"
            Vier Suchen mit Range
            -> Storage-leicht, Ladezeit-intensiv

        2.1.3 Suche ohne subnomen
            Beispiel: The Dark Side Of The Moon
            Storen in index/id/doc.name: "the dark side of the moon"
            Eine Suche mit Range
            -> Storage-leicht, Ladezeit-leicht, aber keine Mittelwort-Suche (Suche nach "dark" -> keine Ergebnisse)

        2.1.4 Download des Indexes
            ChatGPT-Schätzung: 5-10 Sekunden für 1000 Dokumente
            Hybrid Ergebnis anzeigen für Ladezeit
            Genaue Ladezeit ermitteln
            -> Stograge-leicht, Ladezeit-leicht, aber Fake-Grid für 10 Sekunden
            
    2.2. Suche mit API
        Oli: Suche nach einer geeigneten API für Musiksuche (evtl mit Python)
            Kriterien
                1. Schnelligkeit
                2. Volumen
                3. Suchqualität
            Auch wichtig: Cover-URL
        Hier würde die Datenbank wahrscheinlich derselben API befüllt werden, um Verbindung zwischen Index und Datenbank herzustellen

3. Design
    Fast fertige Seiten: Login, Register, Suchseite
    Fehlende Seiten: Userprofil, Album, Artist, User Settings
    Oli:    Design der Seiten auf Figma 
                1. Album
                2. User
                3. Artist
                4. Settings
            Wichtig: Desktop Frame und Smartphone Frame
            Eventuell zum CSS beitragen